# This example runs a sensor that attaches a persistent volume to all of the
# workflow components, for the second and third template this attachment point
# is dynamically generated based on the working directory of the first.

apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: windrunner-sensor
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: payload
      eventSourceName: windrunner-webhook
      eventName: windrunner
  triggers:
    - template:
        name: argo-workflow-trigger
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: windrunner-workflow-
              spec:
                serviceAccountName: argo-events-sa
                entrypoint: windrunner
                ttlStrategy:
                  secondsAfterCompletion: 120 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
                  secondsAfterSuccess: 120     # Time to live after workflow is successful
                  secondsAfterFailure: 120     # Time to live after workflow fails
                arguments:
                  parameters:
                  - name: windrunner-imagetag
                    value: v0.0.9
                  - name: windbound-imagetag
                    value: v0.0.21
                  - name: windchest-imagetag
                    value: v0.0.28
                  - name: container-host
                    value: harbor.digitalforge.app
                  - name: container
                    value: python-greaterthan
                  - name: project
                    value: python-sample-containers
                  - name: container-tag
                    value: latest
                  - name: action
                    value:
                      artifact:
                        full_name: Westfall/python-greaterthan
                        ref: main
                      variables:
                        var1:
                          value: 10
                          units: u.one
                        var2:
                          value: 3
                          units: u.one
                  - name: thread_execution
                    value: 0
                  - name: prev_thread_name
                    value: null
                volumeClaimGC:
                  strategy: OnWorkflowCompletion
                volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
                - metadata:
                    name: workdir                     # name of volume claim
                  spec:
                    accessModes: [ "ReadWriteOnce" ]
                    resources:
                      requests:
                        storage: 1Gi                  # Gi => 1024 * 1024 * 1024

                imagePullSecrets:
                - name: harborcred
                templates:
                - name: windrunner
                  steps:
                  - - name: init-volume
                      template: init-volume
                  - - name: cp-volume
                      template: cp-volume
                  - - name: prep-volume-s3
                      template: prep-volume-s3
                  - - name: run-main
                      template: main
                      continueOn:
                        failed: true
                      arguments:
                        parameters:
                        - name: volume
                          value: "{{steps.init-volume.outputs.parameters.path}}"
                        - name: cmd
                          value: "{{steps.init-volume.outputs.parameters.cmd}}"
                        - name: args
                          value: "{{steps.init-volume.outputs.parameters.args}}"
                  - - name: volume-cleanup
                      template: volume-cleanup

                # Run this volume to pull the docker image and inspect it
                - name: init-volume
                  container:
                    image: "docker.io/westfallio/windrunner:{{workflow.parameters.windrunner-imagetag}}"
                    command: ["python"]
                    args: ["src/main.py", "{{workflow.parameters.project}}", "{{workflow.parameters.container}}", "{{workflow.parameters.container-tag}}"]
                    volumeMounts:                     # same syntax as k8s Pod spec
                    - name: workdir
                      mountPath: /mnt/vol
                  outputs:
                    parameters:
                    - name: path  # name of output parameter
                      valueFrom:
                        path: /mnt/vol/digitalforge/path.txt
                    - name: cmd  # name of output parameter
                      valueFrom:
                        path: /mnt/vol/digitalforge/cmd.txt
                    - name: args  # name of output parameter
                      valueFrom:
                        path: /mnt/vol/digitalforge/args.txt

                # Copy the contents of the workdir to the shared volume
                - name: cp-volume
                  container:
                    image: "{{workflow.parameters.container-host}}/{{workflow.parameters.project}}/{{workflow.parameters.container}}:{{workflow.parameters.container-tag}}"
                    command: [sh, -c]
                    args: ["cp -r . /mnt/vol"]
                    volumeMounts:                     # same syntax as k8s Pod spec
                    - name: workdir
                      mountPath: /mnt/vol


                # Pull the artifacts and overwrite, also upload to s3
                - name: prep-volume-s3
                  container:
                    image: "docker.io/westfallio/windbound:{{workflow.parameters.windbound-imagetag}}"
                    command: [python]
                    args: ["src/main.py", "{{workflow.parameters.action}}", "{{workflow.parameters.thread_execution}}", "{{workflow.parameters.prev_thread_name}}"]
                    volumeMounts:                     # same syntax as k8s Pod spec
                    - name: workdir
                      mountPath: /mnt/vol
                    env:
                    - name: MINIOUSER
                      valueFrom:
                        secretKeyRef:
                          name: minioparams
                          key: user
                    - name: MINIOTOKEN
                      valueFrom:
                        secretKeyRef:
                          name: minioparams
                          key: password
                    - name: WINDSTORMAPICLIENT
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: windstormapiclient
                    - name: WINDSTORMAPISECRET
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: windstormapisecret
                    - name: KEYCLOAKREALM
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: realm
                    - name: GITUSER
                      valueFrom:
                        secretKeyRef:
                          name: gitparams
                          key: username
                    - name: GITPASS
                      valueFrom:
                        secretKeyRef:
                          name: gitparams
                          key: config-pw
                    - name: MINIOHOST
                      value: minio.minio:9000

                - name: main
                  inputs:
                    parameters:
                    - name: volume
                    - name: cmd
                    - name: args
                  activeDeadlineSeconds: 86400
                  podSpecPatch: '{"containers":[{"name":"main", "args":{{inputs.parameters.args}}}]}'
                  container:
                    image: "{{workflow.parameters.container-host}}/{{workflow.parameters.project}}/{{workflow.parameters.container}}:{{workflow.parameters.container-tag}}"
                    command: ["{{inputs.parameters.cmd}}"]
                    args: ["{{inputs.parameters.args}}"]
                    volumeMounts:                     # same syntax as k8s Pod spec
                    - name: workdir
                      mountPath: "{{inputs.parameters.volume}}"

                - name: volume-cleanup
                  container:
                    image: "docker.io/westfallio/windchest:{{workflow.parameters.windchest-imagetag}}"
                    command: [python]
                    args: ["src/main.py", "{{workflow.parameters.action}}", "{{workflow.parameters.thread_execution}}"]
                    volumeMounts:                     # same syntax as k8s Pod spec
                    - name: workdir
                      mountPath: /mnt/vol
                    env:
                    - name: MINIOUSER
                      valueFrom:
                        secretKeyRef:
                          name: minioparams
                          key: wcuser
                    - name: MINIOTOKEN
                      valueFrom:
                        secretKeyRef:
                          name: minioparams
                          key: wcpass
                    - name: WINDSTORMAPICLIENT
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: windstormapiclient
                    - name: WINDSTORMAPISECRET
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: windstormapisecret
                    - name: MINIOHOST
                      value: minio.minio:9000
                    - name: KEYCLOAKREALM
                      valueFrom:
                        secretKeyRef:
                          name: keycloakparams
                          key: realm

          parameters:
            - src:
                dependencyName: payload
                dataKey: body.action.container.image
              dest: spec.arguments.parameters.4.value
            - src:
                dependencyName: payload
                dataKey: body.action.container.project
              dest: spec.arguments.parameters.5.value
            - src:
                dependencyName: payload
                dataKey: body.action.container.tag
              dest: spec.arguments.parameters.6.value
            - src:
                dependencyName: payload
                dataKey: body.action
              dest: spec.arguments.parameters.7.value
            - src:
                dependencyName: payload
                dataKey: body.thread_execution
              dest: spec.arguments.parameters.8.value
            - src:
                dependencyName: payload
                dataKey: body.prev_thread_name
              dest: spec.arguments.parameters.9.value
